{"ast":null,"code":"var _jsxFileName = \"/Users/elisabethmiller/Desktop/StudyBuddy/study-buddy/src/components/MapPage/currentLocation.js\";\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// const mapStyles = {\n//   map: {\n//     position: 'absolute',\n//     // top: '30%',\n//     bottom: '8%',\n//     right: '25%',\n//     width: '50%',\n//     height: '65%',\n//     padding: '10px',\n//     margin: 'auto',\n//     border: '3px solid #94618E',\n//     borderRadius: '5px'\n//   }\n// };\n// export class CurrentLocation extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     const { lat, lng } = this.props.initialCenter;\n//     this.state = {\n//       currentLocation: {\n//         lat: lat,\n//         lng: lng\n//       }\n//     };\n//   }\n//   componentDidMount() {\n//     if (this.props.centerAroundCurrentLocation) {\n//       if (navigator && navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(pos => {\n//           const coords = pos.coords;\n//           this.setState({\n//             currentLocation: {\n//               lat: coords.latitude,\n//               lng: coords.longitude\n//             }\n//           });\n//         });\n//       }\n//     }\n//     this.loadMap();\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevProps.google !== this.props.google) {\n//       this.loadMap();\n//     }\n//     if (prevState.currentLocation !== this.state.currentLocation) {\n//       this.recenterMap();\n//     }\n//   }\n//   loadMap() {\n//     if (this.props && this.props.google) {\n//       // checks if google is available\n//       const { google } = this.props;\n//       const maps = google.maps;\n//       const mapRef = this.refs.map;\n//       // reference to the actual DOM element\n//       const node = ReactDOM.findDOMNode(mapRef);\n//       let { zoom } = this.props;\n//       const { lat, lng } = this.state.currentLocation;\n//       const center = new maps.LatLng(lat, lng);\n//       const mapConfig = Object.assign(\n//         {},\n//         {\n//           center: center,\n//           zoom: zoom\n//         }\n//       );\n//       // maps.Map() is constructor that instantiates the map\n//       this.map = new maps.Map(node, mapConfig);\n//     }\n//   }\n//   recenterMap() {\n//     const map = this.map;\n//     const current = this.state.currentLocation;\n//     const google = this.props.google;\n//     const maps = google.maps;\n//     if (map) {\n//       let center = new maps.LatLng(current.lat, current.lng);\n//       map.panTo(center);\n//     }\n//   }\n//   renderChildren() {\n//     const { children } = this.props;\n//     if (!children) return;\n//     return React.Children.map(children, c => {\n//       if (!c) return;\n//       return React.cloneElement(c, {\n//         map: this.map,\n//         google: this.props.google,\n//         mapCenter: this.state.currentLocation\n//       });\n//     });\n//   }\n//   render() {\n//     const style = Object.assign({}, mapStyles.map);\n//     return (\n//       <div>\n//         <div style={style} ref=\"map\">\n//           Loading map...\n//         </div>\n//         {this.renderChildren()}\n//       </div>\n//     );\n//   }\n// }\n// export default CurrentLocation;\n// CurrentLocation.defaultProps = {\n//   zoom: 14,\n//   initialCenter: {\n//     lat: 45.5122,\n//     lng: -122.6587\n//   },\n//   centerAroundCurrentLocation: false,\n//   visible: true\n// };\nvar React = require('react');\n\nvar INITIAL_LOCATION = {\n  address: 'London, United Kingdom',\n  position: {\n    latitude: 51.5085300,\n    longitude: -0.1257400\n  }\n};\nvar INITIAL_MAP_ZOOM_LEVEL = 8;\nvar ATLANTIC_OCEAN = {\n  latitude: 29.532804,\n  longitude: -55.491477\n};\nvar Application = React.createClass({\n  displayName: \"Application\",\n  getInitialState: function getInitialState() {\n    return {\n      isGeocodingError: false,\n      foundAddress: INITIAL_LOCATION.address\n    };\n  },\n  geocodeAddress: function geocodeAddress(address) {\n    this.geocoder.geocode({\n      'address': address\n    }, function handleResults(results, status) {\n      if (status === google.maps.GeocoderStatus.OK) {\n        this.setState({\n          foundAddress: results[0].formatted_address,\n          isGeocodingError: false\n        });\n        this.map.setCenter(results[0].geometry.location);\n        this.marker.setPosition(results[0].geometry.location);\n        return;\n      }\n\n      this.setState({\n        foundAddress: null,\n        isGeocodingError: true\n      });\n      this.map.setCenter({\n        lat: ATLANTIC_OCEAN.latitude,\n        lng: ATLANTIC_OCEAN.longitude\n      });\n      this.marker.setPosition({\n        lat: ATLANTIC_OCEAN.latitude,\n        lng: ATLANTIC_OCEAN.longitude\n      });\n    }.bind(this));\n  },\n  handleFormSubmit: function handleFormSubmit(submitEvent) {\n    submitEvent.preventDefault();\n    var address = this.searchInputElement.value;\n    this.geocodeAddress(address);\n  },\n  componentDidMount: function componentDidMount() {\n    var mapElement = this.mapElement;\n    this.map = new google.maps.Map(mapElement, {\n      zoom: INITIAL_MAP_ZOOM_LEVEL,\n      center: {\n        lat: INITIAL_LOCATION.position.latitude,\n        lng: INITIAL_LOCATION.position.longitude\n      }\n    });\n    this.marker = new google.maps.Marker({\n      map: this.map,\n      position: {\n        lat: INITIAL_LOCATION.position.latitude,\n        lng: INITIAL_LOCATION.position.longitude\n      }\n    });\n    this.geocoder = new google.maps.Geocoder();\n  },\n  setSearchInputElementReference: function setSearchInputElementReference(inputReference) {\n    this.searchInputElement = inputReference;\n  },\n  setMapElementReference: function setMapElementReference(mapElementReference) {\n    this.mapElement = mapElementReference;\n  },\n  render: function render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-inline\",\n      onSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-8 col-sm-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"sr-only\",\n      htmlFor: \"address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Address\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control input-lg\",\n      id: \"address\",\n      placeholder: \"London, United Kingdom\",\n      ref: this.setSearchInputElementReference,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-xs-4 col-sm-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-default btn-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"glyphicon glyphicon-search\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }))))))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, this.state.isGeocodingError ? React.createElement(\"p\", {\n      className: \"bg-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Address not found.\") : React.createElement(\"p\", {\n      className: \"bg-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, this.state.foundAddress), React.createElement(\"div\", {\n      className: \"map\",\n      ref: this.setMapElementReference,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }))));\n  }\n});\nmodule.exports = Application;","map":{"version":3,"sources":["/Users/elisabethmiller/Desktop/StudyBuddy/study-buddy/src/components/MapPage/currentLocation.js"],"names":["React","require","INITIAL_LOCATION","address","position","latitude","longitude","INITIAL_MAP_ZOOM_LEVEL","ATLANTIC_OCEAN","Application","createClass","getInitialState","isGeocodingError","foundAddress","geocodeAddress","geocoder","geocode","handleResults","results","status","google","maps","GeocoderStatus","OK","setState","formatted_address","map","setCenter","geometry","location","marker","setPosition","lat","lng","bind","handleFormSubmit","submitEvent","preventDefault","searchInputElement","value","componentDidMount","mapElement","Map","zoom","center","Marker","Geocoder","setSearchInputElementReference","inputReference","setMapElementReference","mapElementReference","render","state","module","exports"],"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","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// const mapStyles = {\n//   map: {\n//     position: 'absolute',\n//     // top: '30%',\n//     bottom: '8%',\n//     right: '25%',\n//     width: '50%',\n//     height: '65%',\n//     padding: '10px',\n//     margin: 'auto',\n//     border: '3px solid #94618E',\n//     borderRadius: '5px'\n//   }\n// };\n// export class CurrentLocation extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     const { lat, lng } = this.props.initialCenter;\n//     this.state = {\n//       currentLocation: {\n//         lat: lat,\n//         lng: lng\n//       }\n//     };\n//   }\n//   componentDidMount() {\n//     if (this.props.centerAroundCurrentLocation) {\n//       if (navigator && navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(pos => {\n//           const coords = pos.coords;\n//           this.setState({\n//             currentLocation: {\n//               lat: coords.latitude,\n//               lng: coords.longitude\n//             }\n//           });\n//         });\n//       }\n//     }\n//     this.loadMap();\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevProps.google !== this.props.google) {\n//       this.loadMap();\n//     }\n//     if (prevState.currentLocation !== this.state.currentLocation) {\n//       this.recenterMap();\n//     }\n//   }\n\n//   loadMap() {\n//     if (this.props && this.props.google) {\n//       // checks if google is available\n//       const { google } = this.props;\n//       const maps = google.maps;\n\n//       const mapRef = this.refs.map;\n\n//       // reference to the actual DOM element\n//       const node = ReactDOM.findDOMNode(mapRef);\n\n//       let { zoom } = this.props;\n//       const { lat, lng } = this.state.currentLocation;\n//       const center = new maps.LatLng(lat, lng);\n//       const mapConfig = Object.assign(\n//         {},\n//         {\n//           center: center,\n//           zoom: zoom\n//         }\n//       );\n//       // maps.Map() is constructor that instantiates the map\n//       this.map = new maps.Map(node, mapConfig);\n//     }\n//   }\n\n//   recenterMap() {\n//     const map = this.map;\n//     const current = this.state.currentLocation;\n\n//     const google = this.props.google;\n//     const maps = google.maps;\n\n//     if (map) {\n//       let center = new maps.LatLng(current.lat, current.lng);\n//       map.panTo(center);\n//     }\n//   }\n\n//   renderChildren() {\n//     const { children } = this.props;\n\n//     if (!children) return;\n\n//     return React.Children.map(children, c => {\n//       if (!c) return;\n//       return React.cloneElement(c, {\n//         map: this.map,\n//         google: this.props.google,\n//         mapCenter: this.state.currentLocation\n//       });\n//     });\n//   }\n\n//   render() {\n//     const style = Object.assign({}, mapStyles.map);\n\n//     return (\n//       <div>\n//         <div style={style} ref=\"map\">\n//           Loading map...\n//         </div>\n//         {this.renderChildren()}\n//       </div>\n//     );\n//   }\n// }\n// export default CurrentLocation;\n\n// CurrentLocation.defaultProps = {\n//   zoom: 14,\n//   initialCenter: {\n//     lat: 45.5122,\n//     lng: -122.6587\n//   },\n//   centerAroundCurrentLocation: false,\n//   visible: true\n// };\n\nvar React = require('react');\n\nvar INITIAL_LOCATION = {\n  address: 'London, United Kingdom',\n  position: {\n    latitude: 51.5085300,\n    longitude: -0.1257400\n  }\n};\n\nvar INITIAL_MAP_ZOOM_LEVEL = 8;\n\nvar ATLANTIC_OCEAN = {\n  latitude: 29.532804,\n  longitude: -55.491477\n};\n\nvar Application = React.createClass({  \n  getInitialState: function () {\n    return {\n      isGeocodingError: false,\n      foundAddress: INITIAL_LOCATION.address\n    };\n  },\n\n  geocodeAddress: function (address) {\n    this.geocoder.geocode({ 'address': address }, function handleResults(results, status) {\n\n      if (status === google.maps.GeocoderStatus.OK) {\n\n        this.setState({\n          foundAddress: results[0].formatted_address,\n          isGeocodingError: false\n        });\n\n        this.map.setCenter(results[0].geometry.location);\n        this.marker.setPosition(results[0].geometry.location);\n\n        return;\n      }\n\n      this.setState({\n        foundAddress: null,\n        isGeocodingError: true\n      });\n\n      this.map.setCenter({\n        lat: ATLANTIC_OCEAN.latitude,\n        lng: ATLANTIC_OCEAN.longitude\n      });\n\n      this.marker.setPosition({\n        lat: ATLANTIC_OCEAN.latitude,\n        lng: ATLANTIC_OCEAN.longitude\n      });\n\n    }.bind(this));\n  },\n\n  handleFormSubmit: function (submitEvent) {\n    submitEvent.preventDefault();\n\n    var address = this.searchInputElement.value;\n\n    this.geocodeAddress(address);\n  },\n\n  componentDidMount: function () {\n    var mapElement = this.mapElement;\n    \n    this.map = new google.maps.Map(mapElement, {\n      zoom: INITIAL_MAP_ZOOM_LEVEL,\n      center: {\n        lat: INITIAL_LOCATION.position.latitude,\n        lng: INITIAL_LOCATION.position.longitude\n      }\n    });\n\n    this.marker = new google.maps.Marker({\n      map: this.map,\n      position: {\n        lat: INITIAL_LOCATION.position.latitude,\n        lng: INITIAL_LOCATION.position.longitude\n      }\n    });\n\n    this.geocoder = new google.maps.Geocoder();\n  },\n\n  setSearchInputElementReference: function (inputReference) {\n    this.searchInputElement = inputReference;\n  },\n\n  setMapElementReference: function (mapElementReference) {\n    this.mapElement = mapElementReference;\n  },\n\n  render: function () {\n    return (\n      <div className=\"container\">\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n\n            <form className=\"form-inline\" onSubmit={this.handleFormSubmit}>\n              <div className=\"row\">\n                <div className=\"col-xs-8 col-sm-10\">\n\n                  <div className=\"form-group\">\n                    <label className=\"sr-only\" htmlFor=\"address\">Address</label>\n                    <input type=\"text\" className=\"form-control input-lg\" id=\"address\" placeholder=\"London, United Kingdom\" ref={this.setSearchInputElementReference} required />\n                  </div>\n\n                </div>\n                <div className=\"col-xs-4 col-sm-2\">\n\n                  <button type=\"submit\" className=\"btn btn-default btn-lg\">\n                    <span className=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n                  </button>\n\n                </div>\n              </div>\n            </form>\n\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n\n            {this.state.isGeocodingError ? <p className=\"bg-danger\">Address not found.</p> : <p className=\"bg-info\">{this.state.foundAddress}</p>}\n\n            <div className=\"map\" ref={this.setMapElementReference}></div>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n});\n\nmodule.exports = Application;"]},"metadata":{},"sourceType":"module"}